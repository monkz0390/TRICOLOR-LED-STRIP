
#include <avr/pgmspace.h>

int PotPin = 5;    // select the input pin for the potentiometer
int val = 0;       // variable to store the value coming from the sensor
// ******** DEBUG ==== should auto config to adapt different mother board *********
//#define DATA_1 (PORTF |=  0X01)    // DATA 1    // for ATMEGA
//#define DATA_0 (PORTF &=  0XFE)    // DATA 0    // for ATMEGA
//#define STRIP_PINOUT DDRF=0xFF  // for ATMEGA
#define DATA_1 (PORTC |=  0X01)    // DATA 1    // for UNO
#define DATA_0 (PORTC &=  0XFE)    // DATA 0    // for UNO
#define STRIP_PINOUT (DDRC=0xFF)    // for UNO

PROGMEM const unsigned long pattern_test_dark[10][10]={
  {0x000011,0x000011,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x000022,0x000022,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x000044,0x000044,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x000055,0x000055,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x000066,0x000066,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x000000,0x000088,0x000088,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x0000aa,0x0000aa,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x0000cc,0x0000cc,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x0000dd,0x0000dd},
  {0x0000ff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x0000ff},
};

PROGMEM const unsigned long pattern_test_red[10][10]={
  {0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0xff0000,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x000000,0xff0000,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xff0000,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xff0000,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xff0000,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xff0000},
};

PROGMEM const unsigned long pattern_test_blue[10][10]={
  {0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x00ff00,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x00ff00,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x00ff00},
};

PROGMEM const unsigned long pattern_test_green[10][10]={
  {0x0000ff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x0000ff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x0000ff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x0000ff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x0000ff,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x000000,0x0000ff,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x0000ff,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x0000ff,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x0000ff,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x0000ff},
};

PROGMEM const unsigned long pattern_test_white[10][10]={
  {0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x000000,0xffffff,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xffffff,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xffffff,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xffffff,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xffffff},
};

PROGMEM const unsigned long pattern_test_purple[10][10]={
  {0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff},
  {0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff},
  {0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff},
  {0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff},
  {0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff},
  {0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff},
  {0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff},
  {0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff},
  {0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff},
  {0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff},
};

PROGMEM const unsigned long pattern_test_deeppurple[10][10]={
  {0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd},
  {0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd},
  {0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd},
  {0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd},
  {0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd},
  {0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd},
  {0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd},
  {0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd},
  {0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd},
  {0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd,0x00ffdd},
};
PROGMEM const unsigned long pattern_test_deepdeeppurple[10][10]={
  {0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa},
  {0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa},
  {0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa},
  {0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa},
  {0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa},
  {0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa},
  {0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa},
  {0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa},
  {0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa},
  {0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa,0x00ffaa},
};

PROGMEM const unsigned long pattern_test_yellow[10][10]={
  {0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff},
  {0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff},
  {0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff},
  {0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff},
  {0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff},
  {0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff},
  {0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff},
  {0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff},
  {0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff},
  {0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff},
};


PROGMEM const unsigned long pattern_test_end[10][10]={
  {0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff},
  {0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff},
  {0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff},
  {0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff},
  {0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff},
  {0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff},
  {0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff},
  {0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff},
  {0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff},
  {0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff},
};




PROGMEM const unsigned long pattern_test_comet1[][10]={
  {0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x444444,0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x111111,0x444444,0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x111111,0x444444,0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x111111,0x444444,0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x111111,0x444444,0xffffff,0x000000,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x111111,0x444444,0xffffff,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x000000,0x111111,0x444444,0xffffff,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x111111,0x444444,0xffffff,0x000000},
  {0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x111111,0x444444,0xffffff},
};

PROGMEM const unsigned long pattern_test_comet2[][10]={
  {0xffffff,0x000000,0x000000,0x111111,0x444444,0xffffff,0x000000,0x000000,0x000000,0x000000},
  {0x444444,0xffffff,0x000000,0x000000,0x111111,0x444444,0xffffff,0x000000,0x000000,0x000000},
  {0x111111,0x444444,0xffffff,0x000000,0x000000,0x111111,0x444444,0xffffff,0x000000,0x000000},
  {0x000000,0x111111,0x444444,0xffffff,0x000000,0x000000,0x111111,0x444444,0xffffff,0x000000},
  {0x000000,0x000000,0x111111,0x444444,0xffffff,0x000000,0x000000,0x111111,0x444444,0xffffff},
  {0xffffff,0x000000,0x000000,0x111111,0x444444,0xffffff,0x000000,0x000000,0x000000,0x000000},
  {0x444444,0xffffff,0x000000,0x000000,0x111111,0x444444,0xffffff,0x000000,0x000000,0x000000},
  {0x111111,0x444444,0xffffff,0x000000,0x000000,0x111111,0x444444,0xffffff,0x000000,0x000000},
  {0x000000,0x111111,0x444444,0xffffff,0x000000,0x000000,0x111111,0x444444,0xffffff,0x000000},
  {0x000000,0x000000,0x111111,0x444444,0xffffff,0x000000,0x000000,0x111111,0x444444,0xffffff},
};

PROGMEM const unsigned long pattern_test_comet3[][10]={
  {0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xffffff},
  {0x444444,0xffffff,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xffffff,0x444444},
  {0x111111,0x444444,0xffffff,0x000000,0x000000,0x000000,0x000000,0xffffff,0x444444,0x111111},
  {0x000000,0x111111,0x444444,0xffffff,0x000000,0x000000,0xffffff,0x444444,0x111111,0x000000},
  {0x000000,0x000000,0x111111,0x444444,0xffffff,0xffffff,0x444444,0x111111,0x000000,0x000000},
  {0x000000,0x000000,0x111111,0x444444,0xffffff,0xffffff,0x444444,0x111111,0x000000,0x000000},
  {0x000000,0x000000,0x000000,0xffffff,0x444444,0x444444,0xffffff,0x000000,0x000000,0x000000},
  {0x000000,0x000000,0xffffff,0x444444,0x111111,0x111111,0x444444,0xffffff,0x000000,0x000000},
  {0x000000,0xffffff,0x444444,0x111111,0x000000,0x000000,0x111111,0x444444,0xffffff,0x000000},
  {0xffffff,0x444444,0x111111,0x000000,0x000000,0x000000,0x000000,0x111111,0x444444,0xffffff},
  {0x444444,0x111111,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x111111,0x444444},
  {0x111111,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x111111},
};

PROGMEM const unsigned long pattern_test_rainbow[10][10]={
  {0xff0000,0xff7f00,0xffff00,0x00ff00,0x0000ff,0x6f00ff,0x8f00ff,0x000000,0x000000,0x000000},
  {0x000000,0xff0000,0xff7f00,0xffff00,0x00ff00,0x0000ff,0x6f00ff,0x8f00ff,0x000000,0x000000},
  {0x000000,0x000000,0xff0000,0xff7f00,0xffff00,0x00ff00,0x0000ff,0x6f00ff,0x8f00ff,0x000000},
  {0x000000,0x000000,0x000000,0xff0000,0xff7f00,0xffff00,0x00ff00,0x0000ff,0x6f00ff,0x8f00ff},
  {0x8f00ff,0x000000,0x000000,0x000000,0xff0000,0xff7f00,0xffff00,0x00ff00,0x0000ff,0x6f00ff},
  {0x6f00ff,0x8f00ff,0x000000,0x000000,0x000000,0xff0000,0xff7f00,0xffff00,0x00ff00,0x0000ff},
  {0x0000ff,0x6f00ff,0x8f00ff,0x000000,0x000000,0x000000,0xff0000,0xff7f00,0xffff00,0x00ff00},
  {0x00ff00,0x0000ff,0x6f00ff,0x8f00ff,0x000000,0x000000,0x000000,0xff0000,0xff7f00,0xffff00},
  {0xffff00,0x00ff00,0x0000ff,0x6f00ff,0x8f00ff,0x000000,0x000000,0x000000,0xff0000,0xff7f00},
  {0xff7f00,0xffff00,0x00ff00,0x0000ff,0x6f00ff,0x8f00ff,0x000000,0x000000,0x000000,0xff0000},
};


PROGMEM const unsigned long pattern_test_pink[10][10]={
  {0x00ffff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff},
  {0x6f00ff,0x00ffff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff},
  {0x6f00ff,0x6f00ff,0x00ffff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff},
  {0x6f00ff,0x6f00ff,0x00ffff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff},
  {0x6f00ff,0x6f00ff,0x6f00ff,0x00ffff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff},
  {0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x00ffff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff},
  {0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x00ffff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff},
  {0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x00ffff,0x6f00ff,0x6f00ff,0x6f00ff},
  {0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x00ffff,0x6f00ff,0x6f00ff},
  {0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x6f00ff,0x00ffff,0x6f00ff},

};



PROGMEM const unsigned long pattern_test_p2[11][10]={

  {0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x6f00ff},
  {0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x6f00ff,0x00ffff},
  {0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x6f00ff,0x00ffff,0x00ffff},
  {0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x6f00ff,0x00ffff,0x00ffff,0x00ffff}, 
  {0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x6f00ff,0x00ffff,0x00ffff,0x00ffff,0x00ffff},
  {0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x6f00ff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff},
  {0x00ffff,0x00ffff,0x00ffff,0x6f00ff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff},
  {0x00ffff,0x00ffff,0x6f00ff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff},
  {0x00ffff,0x00ffff,0x6f00ff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff},
  {0x00ffff,0x6f00ff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff},
  {0x6f00ff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff,0x00ffff},
  
};

// ***********************************************************************************************************
// *
// *                            Power Up Init.
// *
// *
// ***********************************************************************************************************


void setup() {                
  STRIP_PINOUT;        // set output pin - DEBUG: should auto detect which mother board for use

  reset_strip();
  //noInterrupts();
  Serial.begin(9600);      // open the serial port at 9600 bps: 
}



// ***********************************************************************************************************
// *
// *                            Main Loop 
// *
// *
// ***********************************************************************************************************
void loop() {
  val = analogRead(PotPin);
  
  if (val <5){
  send_1M_pattern(pattern_test_deepdeeppurple, 10, 500);
  delay(5);
  Serial.print("purple");
    Serial.print(val);
  Serial.println();
  }

 else if (val > 5 && val < 700){
   send_1M_pattern(pattern_test_yellow, 10, 500);
   delay(5);
  Serial.print("yellow");
    Serial.print(val);
  Serial.println();
  }
 else if (val > 700 && val < 800){
 send_1M_pattern(pattern_test_white, 10, 500);
   delay(5);
  Serial.print("White");
    Serial.print(val);
  Serial.println();
  }
  
  else if (val > 800){
  send_1M_pattern(pattern_test_dark, 10, 500);
  delay(5); 
  Serial.print("green");
    Serial.print(val);
  Serial.println();
}

}
/*******************************************************************************
 * Function Name  : send_1M_pattern
 * Description    : Transmit pattern to whole 1 meter strip
 *                  
 * Input          : pointer to ROM pattern; pattern length; frame rate
 *                  
 * Output         : None
 * Return         : None
 *******************************************************************************/
void send_1M_pattern(const unsigned long data[][10], int pattern_no, int frame_rate)
{
  int i=0;
  int j=0;
  uint32_t temp_data;

  for (i=0;i<pattern_no;i++)
  {
    noInterrupts();
    for (j=0;j<10;j++)
    {
      temp_data=pgm_read_dword_near(&data[i][j]);
      send_strip(temp_data);
    }
    interrupts();

    delay(frame_rate);

  }




}


/*******************************************************************************
 * Function Name  : send_strip
 * Description    : Transmit 24 pulse to LED strip
 *                  
 * Input          : 24-bit data for the strip
 *                  
 * Output         : None
 * Return         : None
 *******************************************************************************/
void send_strip(uint32_t data)
{
  int i;
  unsigned long j=0x800000;
  
 
  for (i=0;i<24;i++)
  {
    if (data & j)
    {
      DATA_1;
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");    
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      
/*----------------------------*/
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");  
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");  
      __asm__("nop\n\t");  
      __asm__("nop\n\t");        
/*----------------------------*/      
      DATA_0;
    }
    else
    {
      DATA_1;
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");    
      DATA_0;
/*----------------------------*/      
       __asm__("nop\n\t");
      __asm__("nop\n\t");
      __asm__("nop\n\t");      
/*----------------------------*/         
    }

    j>>=1;
  }


  
}

/*******************************************************************************
 * Function Name  : reset_strip
 * Description    : Send reset pulse to reset all color of the strip
 *                  
 * Input          : None
 *                  
 * Output         : None
 * Return         : None
 *******************************************************************************/
void	reset_strip()
{
  DATA_0;
  delayMicroseconds(20);
}

